<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
/* @var $this Mage_Catalog_Block_Product_View_Options */
?>

<?php $_options = Mage::helper('core')->decorateArray($this->getOptions()) ?>
<?php if (count($_options)):?>
    <input type="hidden" name="option_selected" id="option_selected" value="<?php echo $this->getOptionSelected()?>" />
    <input type="hidden" name="option_selected_order" id="option_selected_order" value="<?php echo $this->getOptionSelectedOrder()?>" />
    <script type="text/javascript">
    //<![CDATA[
    var optionElementsSelected = <?php echo $this->getOptionSelected()?>;
    var optionElementsSelectedOrder = <?php echo $this->getOptionSelectedOrder()?>;
    var customOptionsDepend = <?php echo $this->getCustomOptionsDependJsonConfig()?>;
    var optionFileUpload = {
        productForm : $('product_addtocart_form'),
        formAction : '',
        formElements : {},
        upload : function(element){
            this.formElements = this.productForm.select('input', 'select', 'textarea', 'button');
            this.removeRequire(element.readAttribute('id').sub('option_', ''));

            template = '<iframe id="upload_target" name="upload_target" style="width:0; height:0; border:0;"><\/iframe>';

            Element.insert($('option_'+element.readAttribute('id').sub('option_', '')+'_uploaded_file'), {after: template});

            this.formAction = this.productForm.action;

            var baseUrl = '<?php echo $this->getUrl('*/product/upload') ?>';
            var urlExt = 'option_id/'+element.readAttribute('id').sub('option_', '');

            this.productForm.action = parseSidUrl(baseUrl, urlExt);
            this.productForm.target = 'upload_target';
            this.productForm.submit();
            this.productForm.target = '';
            this.productForm.action = this.formAction;
        },
        removeRequire : function(skipElementId){
            for(var i=0; i<this.formElements.length; i++){
                if (this.formElements[i].readAttribute('id') != 'option_'+skipElementId+'_file' && this.formElements[i].type != 'button') {
                    this.formElements[i].disabled='disabled';
                }
            }
        },
        addRequire : function(skipElementId){
            for(var i=0; i<this.formElements.length; i++){
                if (this.formElements[i].readAttribute('name') != 'options_'+skipElementId+'_file' && this.formElements[i].type != 'button') {
                    this.formElements[i].disabled='';
                }
            }
        },
        uploadCallback : function(data){
            this.addRequire(data.optionId);
            $('upload_target').remove();

            if (data.error) {

            } else {
                $('option_'+data.optionId+'_uploaded_file').value = data.fileName;
                $('option_'+data.optionId+'_file').value = '';
                $('option_'+data.optionId+'_file').hide();
                $('option_'+data.optionId+'').hide();
                template = '<div id="option_'+data.optionId+'_file_box"><a href="#"><img src="var/options/'+data.fileName+'" alt=""><\/a><a href="#" onclick="optionFileUpload.removeFile('+data.optionId+')" title="Remove file" \/>Remove file<\/a>';

                Element.insert($('option_'+data.optionId+'_uploaded_file'), {after: template});
            }
        },
        removeFile : function(optionId)
        {
            $('option_'+optionId+'_uploaded_file').value= '';
            $('option_'+optionId+'_file').show();
            $('option_'+optionId+'').show();

            $('option_'+optionId+'_file_box').remove();
        }
    }
    var optionTextCounter = {
        count : function(field,cntfield,maxlimit){
            if (field.value.length > maxlimit){
                field.value = field.value.substring(0, maxlimit);
            } else {
                cntfield.innerHTML = maxlimit - field.value.length;
            }
        }
    }



    Product.Options = Class.create();
    Product.Options.prototype = {
        initialize : function(config,groupConfig) {
            this.config = config;
            this.groupConfig = groupConfig;
            this.selectedGroups = {};
            this.mainPriceGroupIdSelected ='<?php echo $this->getDefaultMainGroupSelect() ?>';
            this.reloadPrice();

            document.observe("dom:loaded", this.reloadPrice.bind(this));
        },
        inArray : function(needle, haystack, argStrict) {
            var key = '',
                    strict = !! argStrict;

            if (strict) {
                for (key in haystack) {
                    if (haystack[key] === needle) {
                        return true;
                    }
                }
            } else {
                for (key in haystack) {
                    if (haystack[key] == needle) {
                        return true;
                    }
                }
            }

            return false;
        },
        empty : function (mixed_var) {
            var undef, key, i, len;
            var emptyValues = [undef, null, false, 0, "", "0"];

            for (i = 0, len = emptyValues.length; i < len; i++) {
                if (mixed_var === emptyValues[i]) {
                    return true;
                }
            }

            if (typeof mixed_var === "object") {
                for (key in mixed_var) {
                    // TODO: should we check for own properties only?
                    //if (mixed_var.hasOwnProperty(key)) {
                    return false;
                    //}
                }
                return true;
            }

            return false;
        },
        reloadPrice : function(sender) {

            var This = this;
            var priceType = '';
            var groupId='';
            var groupSelected;
            var optionIdsAvaiable;
            var needUpdateAddPrice = false;
            var optionId;
            var elementSelect = $('select_9');
            if(sender){
                if (jQuery.browser.msie  && parseInt(jQuery.browser.version, 10) === 8) {

                } else {
                    for(var lm=0;lm < sizeOptions.length;lm++){
                            $('select_9').options[lm] = sizeOptions[lm];
                    }
                }



                jQuery('#group_option_'+jQuery(sender).attr('parent_group_id')+'_'+jQuery(sender).attr('group_id')).trigger('click');

                try{
                    $(sender).getAttribute('option_id');
                }
                catch(e){

                    return;
                }
                var attrOptionId = $(sender).getAttribute('option_id');
                if(!this.inArray($(sender).getAttribute('option_id'),optionElementsSelectedOrder)){
                    optionElementsSelectedOrder.push(attrOptionId);
                }
                optionElementsSelected[$(sender).getAttribute('option_id')] = {type:$(sender).getAttribute('type')?$(sender).getAttribute('type'):'select',id:$(sender).id,value:$(sender).getAttribute('type')?$(sender).value:$(sender).selectedIndex};
                $('option_selected_order').value = Object.toJSON(optionElementsSelectedOrder);
                $('option_selected').value = Object.toJSON(optionElementsSelected);
                optionId = $(sender).getAttribute('option_id');
                groupId = $(sender).getAttribute('group_id');
                var valueId = $(sender).value;
                groupSelected = this.groupConfig.groupConfig[groupId];
                if(groupSelected == null){
                    return;
                }
                priceType = this.empty(groupSelected['price_type']) ? 'normal_price' :  groupSelected['price_type'];

                if(this.empty( this.selectedGroups[priceType])){
                    this.selectedGroups[priceType] = {};
                }

                if(this.empty( this.selectedGroups[priceType][groupId] )){
                    this.selectedGroups[priceType][groupId] = {};
                }

                var optionKey = 'option'+optionId;
                if(typeof(groupSelected) != 'undefined'){
                    if(groupSelected['option_ids']){
                        optionIdsAvaiable = groupSelected['option_ids'].split(',');
                        if(this.inArray(optionId,optionIdsAvaiable)){
                            this.selectedGroups[priceType][groupId][optionKey] = valueId;
                            var startFormat = false;
                            var selectedGroupClone = Object.clone(this.selectedGroups);
                            for(var g in selectedGroupClone[priceType][groupId]){
                                if(startFormat){
                                    delete(this.selectedGroups[priceType][groupId][g]);
                                }
                                if(g == optionKey ){
                                    startFormat = true;
                                }
                            }
                        }
                    }

                }

            }
            else{
                groupSelected = this.groupConfig.groupConfig[this.mainPriceGroupIdSelected];

                priceType = this.empty(groupSelected['price_type']) ? 'normal_price' :  groupSelected['price_type'];
            }

            if(priceType == 'normal_price' || priceType ==''){

                var config = this.config;
                var skipIds = [];
                $$('body .product-custom-option').each(function(element){
                    var optionId = 0;
                    element.name.sub(/[0-9]+/, function(match){
                        optionId = parseInt(match[0], 10);
                    });
                    if (config[optionId]) {
                        var configOptions = config[optionId];
                        var curConfig = {price: 0};
                        if (element.type == 'checkbox' || element.type == 'radio') {
                            if (element.checked) {
                                if (typeof configOptions[element.getValue()] != 'undefined') {
                                    curConfig = configOptions[element.getValue()];
                                }
                            }
                        } else if(element.hasClassName('datetime-picker') && !skipIds.include(optionId)) {
                            dateSelected = true;
                            $$('.product-custom-option[id^="options_' + optionId + '"]').each(function(dt){
                                if (dt.getValue() == '') {
                                    dateSelected = false;
                                }
                            });
                            if (dateSelected) {
                                curConfig = configOptions;
                                skipIds[optionId] = optionId;
                            }
                        } else if(element.type == 'select-one' || element.type == 'select-multiple') {
                            if ('options' in element) {
                                $A(element.options).each(function(selectOption){
                                    if ('selected' in selectOption && selectOption.selected) {
                                        if (typeof(configOptions[selectOption.value]) != 'undefined') {
                                            curConfig = configOptions[selectOption.value];
                                        }
                                    }
                                });
                            }
                        } else {
                            if (element.getValue().strip() != '') {
                                curConfig = configOptions;
                            }
                        }
                        if(element.type == 'select-multiple' && ('options' in element)) {
                            $A(element.options).each(function(selectOption) {
                                if (('selected' in selectOption) && typeof(configOptions[selectOption.value]) != 'undefined') {
                                    if (selectOption.selected) {
                                        curConfig = configOptions[selectOption.value];
                                    } else {
                                        curConfig = {price: 0};
                                    }
                                    optionsPrice.addCustomPrices(optionId + '-' + selectOption.value, curConfig);
                                    optionsPrice.reload();
                            }
                            });
                        } else {
                            optionsPrice.addCustomPrices(element.id || optionId, curConfig);
                            optionsPrice.reload();
                        }
                    }
                });
            }
            else if (priceType == 'main_price'){
                if(typeof(this.selectedGroups['main_price']) == 'undefined'){
                    return;
                }

                if(groupId != this.mainPriceGroupIdSelected){

                    if(sender){

                        if(jQuery(sender).attr('type') == 'radio'){
                            jQuery(sender).parent().addClass('selected');
                            jQuery(sender).parent().siblings().removeClass('selected');
                        }


                        var availableSteps = jQuery(sender).parents('div.group-step').attr('available_step');
                        availableSteps = availableSteps.split(',');

                        var currentStep = parseInt(jQuery(sender).parents('div.group-step').attr('step'));
                        availableSteps.push(currentStep);
                        var listGroupStep = jQuery('div.group-step').filter(function(){
                            var stepElement = jQuery(this).attr('step');
                            return !This.inArray(stepElement,availableSteps);
                        });

                        listGroupStep.each(function(){
                            jQuery(this).parent().parent().hide();
                        });

                        //console.log(listGroupStep);
                        var validate = productAddToCartForm.validator.validate();
                        if(validate){

                            for(var l=0;l < availableSteps.length;l++){
                                var step = parseInt(availableSteps[l]);

                                if(step > currentStep){
                                    //jQuery('#group-step-'+step).find('li:first > input').trigger('click');
                                }

                                jQuery('#group-step-'+step).show();
                            }

                        }

                        //console.log('#group_option_'+jQuery(sender).attr('parent_group_id')+'_'+jQuery(sender).attr('group_id'));
                    }

                    return;
                }

                var optionConfig = this.groupConfig.optionConfig[groupId];

                var optionsSelected = this.selectedGroups['main_price'][this.mainPriceGroupIdSelected];
                var optionsSelectedKey = [];
                for(var j in optionsSelected){
                    optionsSelectedKey.push(j);
                }

                var result = SQLike.q({
                    Select: ['*'],
                    From: optionConfig,
                    Where: function(){
                        var result = true;
                        var count = false;
                        for(var i in optionsSelected){
                            count = true;
                            result = result && (this[i] == optionsSelected[i]);
                        }
                        result = result && count;

                        return result;
                    }
                });
                //console.log("result SQLike Option select:");
                //console.log(result);
                // update option

                var availableOptions = {};
                for(var l=0;l<optionIdsAvaiable.length;l++){
                    var optId = optionIdsAvaiable[l];
                    var optionListElementId = 'options-'+ optId +'-list';
                    var optionSelectElementId = 'select_'+ optId ;
                    if(!this.inArray('option'+optId,optionsSelectedKey)){
                        if($(optionListElementId)){
                            if(typeof(availableOptions['li']) == 'undefined'){
                                availableOptions['li'] = {};
                            }
                            if(typeof(availableOptions['li'][optId]) =='undefined'){
                                availableOptions['li'][optId] = {};
                            }
                        }
                        else if($(optionSelectElementId)){
                            if(typeof(availableOptions['select']) == 'undefined'){
                                availableOptions['select'] = {};
                            }
                            if(typeof(availableOptions['select'][optId]) =='undefined'){
                                availableOptions['select'][optId] = {};
                            }
                        }
                    }
                }

                //console.log(availableOptions);

                for(var k=0 ; k < result.length ;k++){
                    var row = result[k];
                    for(var opt in row){

                        var optId = opt.replace('option','');
                        if(optId != 'undefined' && optId != 'price'){
                            if(!this.inArray(opt,optionsSelectedKey)){
                                var optionListElementId = 'options-'+ optId +'-list';
                                var optionSelectElementId = 'select_'+ optId;
                                if($(optionListElementId)){

                                    availableOptions['li'][optId][row[opt]] = row[opt];
                                }

                                else if($(optionSelectElementId)){

                                    availableOptions['select'][optId][row[opt]] = row[opt];
                                }
                            }
                        }
                    }
                }
                //console.log(availableOptions);
                if(result.length == 1){
                    var mainPrice = result[0]['price'];
                    optionsPrice.addCustomPrices('main_price', {price: mainPrice});
                    optionsPrice.reload();
                }
                else{
                    var mainPrice = 0;
                    optionsPrice.addCustomPrices('main_price', {price: mainPrice});
                    optionsPrice.reload();
                }

                for(var type in availableOptions){
                    switch(type){
                        case 'li':

                            for(var j in availableOptions[type]){
                                var optionListElementId = 'options-'+ j +'-list';

                                $$('#'+optionListElementId + ' li').invoke('hide');
                                $$('#'+optionListElementId + ' li').each(function(element){
                                    var valueIdOption = $(element).getAttribute('rel');
                                    if($(valueIdOption)){
                                        $(valueIdOption).checked = false;
                                        $(element).removeClassName('selected');
                                    }
                                });
                                for(var k in availableOptions[type][j]){

                                    $$('#'+optionListElementId + ' li[value="'+k+'"]').invoke('show');
                                    $$('#'+optionListElementId + ' li[value="'+k+'"]').each(function(element){
                                        var valueIdOption = $(element).getAttribute('rel');
                                        //$(element).text = $(element).getAttribute('org_text') + ' -  Price: ' +result[0]['price'];

                                        if($(valueIdOption)){
                                            $(valueIdOption).removeAttribute('disabled');

                                            $(valueIdOption).setAttribute('group_id',This.mainPriceGroupIdSelected);
                                        }
                                    });
                                }
                            }
                            break;
                        case 'select':
                            for(var j in availableOptions[type]){
                                var optionListElementId = 'select_'+ j;
                                $(optionListElementId).value = '';
                                $$(optionListElementId+' option').each(function(o){
                                    if(o.value==''){o.selected = true;$break;}
                                });

                                $(optionListElementId).setAttribute('group_id',this.mainPriceGroupIdSelected);
                                $$('#'+optionListElementId + ' option:not([value=""])').each(function(element){
                                    $(element).hide();
                                    $(element).setAttribute('disabled','disabled');
                                    $(element).text = $(element).getAttribute('org_text');
                                });

                                for(var k in availableOptions[type][j]){

                                    $$('#'+optionListElementId + ' option[value="'+k+'"]').each(function(element){
                                        $(element).removeAttribute('disabled');
                                        var priceValue = '';
                                        var optKey = 'option'+ j;
                                        for(var b =0; b < result.length;b++ ){
                                            if(result[b][optKey] == $(element).value){
                                                priceValue =  optionsPrice.formatPrice(result[b].price);
                                                break;
                                            }
                                        }
                                        if(priceValue != ''){
                                            $(element).text = $(element).getAttribute('org_text') + ' -  Price: ' + priceValue;
                                            $(element).setAttribute('price',priceValue);
                                        }
                                    });

                                    $$('#'+optionListElementId + ' option[value="'+k+'"]').invoke('show');
                                }
                            }
                            break;
                    }
                }
            }

            var groupIds = [];

            if(jQuery(sender).attr('name') == 'options[10]'){
                if(typeof(this.selectedGroups['add_price']) == 'undefined'){
                    this.selectedGroups['add_price'] = {'8':{},'9':{}};
                }
                this.selectedGroups['add_price']['8']['option10'] = jQuery(sender).attr('value');
                needUpdateAddPrice = true;
                //groupId = '8';
                groupIds= ['8'];
                priceType = 'add_price';
            }

            if(sender.id == 'select_9'){
                if(typeof(this.selectedGroups['add_price']) == 'undefined'){
                    this.selectedGroups['add_price'] = {'8':{},'9':{}};
                }
                this.selectedGroups['add_price']['8']['option9'] = $(sender).value;

                needUpdateAddPrice = true;
                groupIds= ['8'];
                priceType = 'add_price';

                var priceLabel = $($(sender).options[$(sender).selectedIndex]).getAttribute('price');
                               
                if($('sub-total-price')){
                    $('sub-total-price').update(priceLabel);
                }
                else{
                    $(sender).insert({after: '<br/><br/><br/><span style="font-size: 16px;font-weight: bold;" id="sub-total-price">'+priceLabel+'</span>'});
                } 
                          
                 //johnny: Update Imge option (Canvas size)
                // get Image name selected:  
                var imageName=$($(sender).options[$(sender).selectedIndex]).getAttribute('org_text');
                imageName=imageName.replace('"','').replace('"','');
                //console.log("imageName"+imageName);
                
                var selectedLayOut=jQuery("#group-option-subcontainer10").find('li.selected').find('img').attr('alt');
                if(selectedLayOut==='Single Panel')
                {
                    imageName="Single"+imageName+".png";
                }
                if(selectedLayOut==='Double Panel')
                {
                    imageName="Double"+imageName+".png";
                }
                if(selectedLayOut==='Triple Panel')
                {
                    imageName="Triple"+imageName+".png";
                }
                if(selectedLayOut==='Quadruple Panel')
                {
                    imageName="Quadruple"+imageName+".png";
                }
                console.log(imageName);
                if($('sub-total-image')){
                    $('sub-total-image').remove();
                    $(sender).insert({after: '<span id="sub-total-image" style="margin-left: 11%;margin-top: -12px;position: absolute;"><img src="/media/picasso/canvas_size/'+imageName+'"></span>'});
                }
                else{
                     $(sender).insert({after: '<span id="sub-total-image" style="margin-left: 11%;margin-top: -12px;position: absolute;"><img src="/media/picasso/canvas_size/'+imageName+'"></span>'});
                 }  
            }

            if(jQuery(sender).attr('name') == 'options[14]'){
                if(typeof(this.selectedGroups['add_price']) == 'undefined'){
                    this.selectedGroups['add_price'] = {'8':{},'9':{}};
                }
                this.selectedGroups['add_price']['8']['option14'] = $(sender).value;
                this.selectedGroups['add_price']['9']['option14'] = jQuery(sender).attr('value');
                needUpdateAddPrice = true;
                groupIds= ['8','9'];
                priceType = 'add_price';
            }

            var stepsHide = [];

            for(var gi=0;gi < groupIds.length;gi++){
                groupId = groupIds[gi];

                if (priceType == 'add_price' || needUpdateAddPrice){
                    if(typeof(this.selectedGroups['add_price']) == 'undefined'){
                        return;
                    }
                    var groupSelected2 = this.groupConfig.groupConfig[groupId];
                    var  optionIdsAvaiable2 = groupSelected2['option_ids'].split(',');
                    var optionConfig = this.groupConfig.optionConfig[groupId];

                    var optionsSelected = this.selectedGroups['add_price'][groupId];


                    //console.log(optionsSelected);

                    var optionsSelectedKey = [];
                    for(var j in optionsSelected){
                        optionsSelectedKey.push(j);
                    }

                    var result = SQLike.q({
                        Select: ['*'],
                        From: optionConfig,
                        Where: function(){
                            var result = true;
                            var count = false;
                            for(var i in optionsSelected){
                                count = true;
                                result = result && (this[i] == optionsSelected[i]);
                            }
                            result = result && count;

                            return result;
                        }
                    });

                    // hieptq hardcode fix later
                    var optionHardCode = ['14','13'];

                    //for(var l=0; l < optionHardCode.length;l++){
                        //var optionIdFix = optionHardCode[l];
                    var optionIdFix ='';
                    if(groupId == '8'){
                        optionIdFix = '14';
                    }
                    else if(groupId == '9'){
                        optionIdFix = '13';
                    }

                        var optionsSelected2 = Object.clone(optionsSelected);
                        if(!this.empty(optionsSelected2['option'+optionIdFix])){
                            delete(optionsSelected2['option'+optionIdFix]);
                        }


                        var result2 = SQLike.q({
                            Select: ['*'],
                            From: optionConfig,
                            Where: function(){
                                var result = true;
                                var count = false;
                                for(var i in optionsSelected2){
                                    count = true;
                                    result = result && (this[i] == optionsSelected2[i]);
                                }
                                result = result && count;

                                return result;
                            }
                        });



                        $$('body .product-custom-option').each(function(element){
                            var optionId = 0;
                            element.name.sub(/[0-9]+/, function(match){
                                optionId = parseInt(match[0], 10);
                            });
                            if(optionId == 0){
                                return;
                            }
                            if(optionIdFix == optionId){
                                if(This.inArray(optionId,optionIdsAvaiable2)){

                                    var elementValue = '';
                                    if (element.type == 'checkbox' || element.type == 'radio') {
                                        elementValue = element.getAttribute('value');
                                        var priceValue = '';
                                        var optKey = 'option'+ optionId;
                                        for(var b =0; b < result2.length;b++ ){
                                            //console.log(result2[b][optKey],elementValue);
                                            if(result2[b][optKey] == elementValue){
                                                priceValue =  optionsPrice.formatPrice(result2[b].price);
                                                break;
                                            }
                                        }
                                        if(priceValue != ''){
                                            jQuery(element).parent().show();
                                            jQuery(element).prop('disabled', false);

                                            var labelElement = jQuery(element).siblings('label:first').children('span:first');
                                            if(priceValue == '$0.00'){
                                                labelElement.html(jQuery(element).attr('org_text')+'<br/>Free');
                                            }
                                            else{
                                                labelElement.html(jQuery(element).attr('org_text')+'<br/>+' + priceValue + '');
                                            }

                                        }
                                        else{
                                            jQuery(element).parent().removeClass('selected').hide();
                                            jQuery(element).prop('checked', false).prop('disabled', true);
                                        }
                                    }
                                }

                            }


                        });
                    //}



                    //console.log(result);
                    if(result.length == 1){
                        var mainPrice = result[0]['price'];
                        optionsPrice.addCustomPrices('add_price'+groupId, {price: mainPrice});
                        optionsPrice.reload();
                    }
                    else{
                        var mainPrice = 0;
                        optionsPrice.addCustomPrices('add_price'+groupId, {price: mainPrice});
                        optionsPrice.reload();
                    }

                    var numElementDisplay = jQuery('#group_option_container_'+groupId).find('input:enabled').length;
                    if(numElementDisplay == 0){
                        jQuery('#group_option_container_'+groupId).hide();
                    }
                    else{
                        jQuery('#group_option_container_'+groupId).show();
                    }

                }
            }

            if(sender){

                if(jQuery(sender).attr('type') == 'radio'){
                    jQuery(sender).parent().addClass('selected');
                    jQuery(sender).parent().siblings().removeClass('selected');
                }


                var availableSteps = jQuery(sender).parents('div.group-step').attr('available_step');
                availableSteps = availableSteps.split(',');

                var currentStep = parseInt(jQuery(sender).parents('div.group-step').attr('step'));
                availableSteps.push(currentStep);
                var listGroupStep = jQuery('div.group-step').filter(function(){
                    var stepElement = jQuery(this).attr('step');
                    return !This.inArray(stepElement,availableSteps);
                });

                listGroupStep.each(function(){
                    jQuery(this).parent().parent().hide();
                });

                //console.log(listGroupStep);
                var validate = productAddToCartForm.validator.validate();
                if(validate){

                    for(var l=0;l < availableSteps.length;l++){
                        var step = parseInt(availableSteps[l]);
                        var groupStep = jQuery('#group-step-'+step).parent().parent();
                        if(step != 4){
                            groupStep.show();
                        }
                        else{
                            var numElementDisplay2 = groupStep.find('input:enabled').length;
                            if(numElementDisplay2 == 0){
                                groupStep.hide();
                            }
                            else{
                                groupStep.show();
                            }
                        }
                    }
                }
                this.detectCustomDepend();
            }

            if (jQuery.browser.msie  && parseInt(jQuery.browser.version, 10) === 8) {

            } else {
                $$('#select_9 option:not([value=""])').each(function(element){
                    if($(element).getAttribute('disabled') == 'disabled'){
                        $(element).remove();
                    }
                });
            }
        },
        detectCustomDepend:function(){
            for(var i in customOptionsDepend){
                var customOption = customOptionsDepend[i];
                var isShow = true;
                for(var j in customOption['depends']){
                    var opt = customOption['depends'][j];
                    var value='';
                    switch(opt['type']){
                        case 'radio':
                            value = $$('input:checked[type="radio"][name="options['+j+']"]').pluck('value');
                            if(value.length == 0){
                                value ='';
                            }
                            break;
                        case 'drop_down':
                            value = $('select_'+j).value;
                            break;
                        case 'text':
                            value = $('options_'+j).value;
                            break;
                    }
                    if(value == ''){
                        isShow = false;
                    }
                }
                if(isShow){
                    jQuery('group-option-subcontainer'+i).show();
                }
                else{
                    jQuery('group-option-subcontainer'+i).hide();
                }
            }
        }
    };
    function validateOptionsCallback(elmId, result) {
        var container = $(elmId).up('ul.options-list');
        if (result == 'failed') {
            container.removeClassName('validation-passed');
            container.addClassName('validation-failed');
        } else {
            container.removeClassName('validation-failed');
            container.addClassName('validation-passed');
        }
    }
    var opConfig = new Product.Options(<?php echo $this->getJsonConfig() ?>,<?php echo $this->getGroupOptionsJsonConfig()?>);
    //]]>
    </script>
    <ul class="custom-paint-group">
	    <?php echo $this->drawGroupOption();?>
    </ul>
    <script type="text/javascript">
        var sizeOptions= [];
        //<![CDATA[
        function groupOptionRadioChange(sender){
            var parentGroupOptionId = jQuery(sender).attr('parent_group_id');
            var groupOptionId = jQuery(sender).attr('group_id');
            opConfig.mainPriceGroupIdSelected = groupOptionId;
            // hieptq hard code
            switch(opConfig.mainPriceGroupIdSelected){
                case '1': // custom painting group

                    break;
                case '3': // Oil Painting Reproduction
                    break;
            }


            if(sender.checked){
                var listElement = jQuery('#group_option_container_'+groupOptionId).siblings().find('.sub-group-option');
                listElement.find('input,select').prop('checked', false);
                listElement.find('input,select').parent().removeClass('selected');
                listElement.find('input,select').prop('disabled', true);
                listElement.hide();

                jQuery('#sub-group-option-'+groupOptionId).find('input,select').prop('disabled', false);
                jQuery('#sub-group-option-'+groupOptionId).show();
            }

            opConfig.reloadPrice();
        }

        jQuery(document).ready(function(){
            var selectOptions = $('select_9').options;
            for(var lm=0; lm < selectOptions.length;lm++){
                sizeOptions[lm] = selectOptions[lm];
            }
            opConfig.detectCustomDepend();
            //prselect option
            for(var i=0;i < optionElementsSelectedOrder.length;i++){
                var elementOpt = optionElementsSelected[optionElementsSelectedOrder[i]];
                var element = jQuery('#'+elementOpt['id']);
                switch (elementOpt['type']){
                    case 'radio':
                        element.click().click();
                    case 'select':
                        var selectedIndex = parseInt(elementOpt['value']);
                        $(elementOpt['id']).selectedIndex = selectedIndex;
                        element.change();
                        break;
                    default:
                        element.val(elementOpt['value']);
                        break;
                }
            }
            if (jQuery.browser.msie  && parseInt(jQuery.browser.version, 10) === 8) {
                jQuery(".options-list label").click(function(){
                    if (jQuery(this).attr("for") != "")
                        jQuery("#" + jQuery(this).attr("for")).click();
                });
            }
        });

        //]]>
    </script>
<?php endif; ?>


